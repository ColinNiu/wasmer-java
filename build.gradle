plugins {
    id 'java'
    // As Wasmer is a package, we need tools to build the JARs and so
    id 'java-library'
}

version '0.1.0'
group 'org.wasmer'

allprojects {
    group 'org.wasmer'
    version '0.1.0'
}

javadoc {
    options.links 'https://docs.oracle.com/javase/8/docs/api/'
    // TODO: change when https://github.com/gradle/gradle/issues/2354 is fixed
    options.addStringOption 'Xdoclint:all', '-Xdoclint:-missing'
}

task generateJniHeaders(type: JavaCompile) {
    classpath = sourceSets.main.compileClasspath
    destinationDir file("include")
    source = sourceSets.main.java
        options.compilerArgs += [
            '-h', file("include"),
            '-d', file("${buildDir}/generated/jni-tmp")
        ]
        options.verbose = true
    doLast {
        delete file("${buildDir}/generated/jni-tmp")
    }
}

// compileJava {
//     options.compilerArgs += ["-h", file("include")]
//     options.verbose = true
// }

// This is neede for the Java plugin to make sure
// the generated class files are compatible with
// old versions of Java.
sourceCompatibility = 1.8
targetCompatibility = 1.8

task buildLocal(type:Exec) {
  commandLine 'make', 'build-rust'
}

// task buildTargets(type:Exec) {
//   commandLine 'make', 'build-rust-all-targets'
// }

task copyAllArtifacts(type: Copy) {
    from "artifacts"
    include "**/*"
    into "$buildDir/toArtifact/org/wasmer/native/"
}

repositories {
    jcenter()
    google()
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

sourceSets {
    main {
        resources {
            srcDirs "$buildDir/toArtifact"
            srcDirs "java/src/main/resources"
        }
        java {
            srcDirs 'java/src/main'
        }
    }
    test {
        resources {
            srcDirs "java/src/test/resources"
        }
        java {
            srcDir 'java/src/test'
        }
    }
}

dependencies {
    testImplementation('org.junit.jupiter:junit-jupiter-api:5.4.2')
    testRuntime('org.junit.jupiter:junit-jupiter-engine:5.4.2')
}

test {
    useJUnitPlatform()
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}

tasks.withType(Test) {
    // We add the path, so the Java Tests can find the
    // shared object file
    systemProperty "java.library.path", "target/release/"
}

// We build the integration before running any test
compileTestJava.dependsOn buildLocal
processResources.dependsOn copyAllArtifacts

// To publish it
// task publish(dependsOn: build) {
//     publishSettings(project, 'wasmer-jni', false)
//     publishSettings(project, 'wasmer-jni-annotations', true)
// }

def publishSettings(project, projectName, includeJavadoc) {
    project.with {
        if (!project.hasProperty('ossrhUsername')) return
        apply plugin: 'maven'
        apply plugin: 'signing'

        archivesBaseName = projectName

        task packageSources(type: Jar) {
            classifier = 'sources'
            from sourceSets.main.allSource
        }

        if (includeJavadoc) {
            task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
                from javadoc.destinationDir
                classifier = 'javadoc'
            }
        } else {
            task packageJavadoc(type: Jar) {
                // Empty to satisfy Sonatype's javadoc.jar requirement
                classifier 'javadoc'
            }
        }

        artifacts {
            archives packageSources, packageJavadoc
        }

        signing {
            sign configurations.archives
        }

        uploadArchives {
            repositories {
                mavenDeployer {
                    beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                    repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
                        authentication(userName: ossrhUsername, password: ossrhPassword)
                    }
                    pom.project {
                        name projectName
                        packaging 'jar'
                        description 'Wasmer is a library to execute WebAssembly binaries'
                        url 'https://wasmer.io'
                        scm {
                            connection 'scm:git:git@github.com:wasmerio/java-ext-wasm.git'
                            developerConnection 'scm:git:git@github.com:wasmerio/java-ext-wasm.git'
                            url 'git@github.com:wasmerio/java-ext-wasm.git'
                        }
                        licenses {
                            license {
                                name 'MIT License'
                                url 'https://opensource.org/licenses/MIT'
                            }
                        }
                        developers {
                            developer {
                                id 'syrusakbary'
                                name 'Syrus Akbary'
                                url 'https://github.com/syrusakbary'
                            }
                        }
                    }
                }
            }
        }
    }
}
